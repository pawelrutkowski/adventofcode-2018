{"version":3,"sources":["Exercise/index.jsx","Day/index.jsx","Day01/index.jsx","Day02/index.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["getPerformance","func","data","t0","performance","now","result","Exercise","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","_handleOnCLick","code","props","_getPerformance","setState","inherits","createClass","key","value","_this2","dataPath","fetch","then","r","text","_this$state","_this$props","name","codeText","description","react_default","a","createElement","prism","language","style","coy","onClick","Component","Day","_ref","day","exercises","map","index","Exercise_Exercise","assign","input","startValue","undefined","split","reduce","prev","element","Number","input1","sequences","balance","isResult","includes","push","Day01","src_Day","countedCharacters","object","character","toConsumableArray","Set","values","test","next","tmp","forEach","asdasdasd","test1","countDiff","element1","element2","e1","e2","count","removeDiff","inputLength","index1","index2","_countDiff","join","Day02","Home","MainMenu","Link","to","App","BrowserRouter","basename","process","href","App_MainMenu","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f7d14c65.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { coy } from \"react-syntax-highlighter/dist/styles/prism\";\n\nconst getPerformance = (func, data) => {\n  const t0 = performance.now();\n  const result = func(data);\n  const t1 = performance.now();\n\n  return {\n    result,\n    performance: t1 - t0\n  };\n};\n\nexport class Exercise extends Component {\n  state = {\n    data: null,\n    result: \"-\",\n    performance: \"-\"\n  };\n\n  componentDidMount() {\n    const { dataPath } = this.props;\n    const toText = r => r.text();\n    const setDataState = data => {\n      this.setState({ data });\n    };\n\n    fetch(dataPath)\n      .then(toText)\n      .then(setDataState);\n  }\n\n  _handleOnCLick = () => {\n    const { data } = this.state;\n    const { code } = this.props;\n    const { result, performance } = getPerformance(code, data);\n    this.setState({ result, performance });\n  };\n\n  render() {\n    const { result, performance } = this.state;\n    const { name, codeText, description } = this.props;\n\n    return (\n      <div>\n        <h2>Exercise {name}</h2>\n        <h3>Description:</h3>\n        <p>{description}</p>\n        <h3>Code:</h3>\n        <SyntaxHighlighter language=\"javascript\" style={coy}>\n          {codeText}\n        </SyntaxHighlighter>\n        <br />\n        <button onClick={this._handleOnCLick}>run</button>\n        <h3>Results: {result}</h3>\n        <h3>Performance: {performance} milliseconds</h3>\n      </div>\n    );\n  }\n}\n\nExercise.propTypes = {\n  name: PropTypes.string,\n  code: PropTypes.func,\n  codeText: PropTypes.string,\n  dataPath: PropTypes.string,\n  description: PropTypes.string\n};\n","import { Exercise } from '../Exercise'\nimport PropTypes from 'prop-types'\nimport React from 'react'\n\nexport const Day = ({ day, exercises }) => {\n  const dayString = 'Day'\n  return (\n    <div>\n      <p>\n        {dayString}\n        {' '}\n        {day}\n      </p>\n      {exercises.map((props, index) => (\n        <Exercise\n          key={props.name}\n          {...props}\n        />\n      ))}\n    </div>\n  )\n}\n\nDay.propTypes = {\n  'day': PropTypes.string.isRequired,\n  'exercises': PropTypes.arrayOf(PropTypes.shape({})).isRequired\n}\n\nDay.propTypes = {\n  name: PropTypes.string,\n};\n\nexport default Day\n","import React from \"react\";\nimport Day from \"../Day\";\n\nconst part01 = (input, startValue = 0) => {\n  const regex = /\\n/gm;\n  const sum = (prev, element) => prev + Number(element);\n\n  return input.split(regex).reduce(sum, startValue);\n};\n\nconst part02 = (input1, startValue = 0) => {\n  const input = input1.split(\"\\n\");\n  const sequences = [0];\n  let balance = startValue;\n  let isResult = true;\n  let result = null;\n\n  while (isResult) {\n    for (let index = 0; index < input.length; index++) {\n      const value = input[index];\n      if (value) {\n        balance += Number(value);\n        if (sequences.includes(balance)) {\n          isResult = false;\n          result = balance;\n          break;\n        } else {\n          sequences.push(balance);\n        }\n      }\n    }\n  }\n\n  return result;\n};\n\nconst props = {\n  day: \"01\",\n  exercises: [\n    {\n      name: \"01\",\n      description: 'Sum all values from input file',\n      dataPath: \"./data/data01.txt\",\n      code: part01,\n      codeText: `\nconst part01 = (input, startValue = 0) => {\n  const regex = /\\\\n/gm;\n  const sum = (prev, element) => prev + Number(element);\n\n  return input.split(regex).reduce(sum, startValue);\n};\n`\n    },\n    {\n      name: \"02\",\n      description: 'Sum the numbers from input until you find a result that occurred twice. If you do not find such a result, continue adding from the beginning of the input data',\n      dataPath: \"./data/data01.txt\",\n      code: part02,\n      codeText: `\nconst part02 = (input1, startValue = 0) => {\n  const input = input1.split(\"\\\\n\");\n  const sequences = [0];\n  let balance = startValue;\n  let isResult = true;\n  let result = null;\n\n  while (isResult) {\n    for (let index = 0; index < input.length; index++) {\n      const value = input[index];\n      if (value) {\n        balance += Number(value);\n        if (sequences.includes(balance)) {\n          isResult = false;\n          result = balance;\n          break;\n        } else {\n          sequences.push(balance);\n        }\n      }\n    }\n  }\n\n  return result;\n};\n`\n    }\n  ]\n};\n\nconst Day01 = () => <Day {...props} />;\n\nexport default Day01;\n","import React from \"react\";\nimport Day from \"../Day\";\n\nconst part01 = input1 => {\n  const countCharacters = value => {\n    const object = {};\n    for (let index = 0; index < value.length; index++) {\n      const character = value[index];\n      if (object[character] === undefined) {\n        object[character] = 1;\n      } else {\n        object[character] += 1;\n      }\n    }\n    return [...new Set(Object.values(object))];\n  };\n\n  const multiply = (prev, next) => prev * next;\n\n  const input = input1.split(\"\\n\");\n\n  const countedCharacters = input.map(countCharacters);\n  const test = {};\n  const sumOfCounters = (prev, next) => {\n    const tmp = prev;\n    next.forEach(element => {\n      const asdasdasd = `test${element}`;\n      if (tmp[asdasdasd] === undefined) {\n        tmp[asdasdasd] = 1;\n      } else {\n        tmp[asdasdasd] += 1;\n      }\n    });\n    return test;\n  };\n  const result = countedCharacters.reduce(sumOfCounters, test);\n\n  delete result.test1;\n\n  return Object.values(result).reduce(multiply, 1);\n};\n\nconst part02 = input1 => {\n  const countDiff = (element1, element2) => {\n    const e1 = element1.split(\"\");\n    const e2 = element2.split(\"\");\n    let count = 0;\n    for (let index = 0; index < e1.length; index++) {\n      if (e1[index] !== e2[index]) {\n        count += 1;\n        if (count > 2) {\n          return { count: 2 };\n        }\n      }\n    }\n    return { count, e1, e2 };\n  };\n\n  const removeDiff = (e1, e2) => {\n    const result = [];\n    for (let index = 0; index < e1.length; index++) {\n      if (e1[index] === e2[index]) {\n        result.push(e1[index]);\n      }\n    }\n    return result;\n  };\n\n  const input = input1.split(\"\\n\");\n\n  const inputLength = input.length;\n  for (let index1 = 0; index1 < inputLength - 1; index1++) {\n    const element1 = input[index1];\n    for (let index2 = index1 + 1; index2 < inputLength; index2++) {\n      const element2 = input[index2];\n      const { count, e1, e2 } = countDiff(element1, element2);\n      if (count < 2) {\n        return removeDiff(e1, e2).join(\"\");\n      }\n    }\n  }\n  return null;\n};\n\nconst props = {\n  day: \"02\",\n  exercises: [\n    {\n      name: \"01\",\n      description: `\n1. If a character repeats a letter two or more times, write the result and calculate the result without repetition for each result\n3. Count how many repetitions you have\n4. Make the most of your recent results\n\nExample:\n1.\n\"abcdef\" = []\n\"bababc\" = [2,3]\n\"abbcde\" = [2]\n\"abcccd\" = [3]\n\"aabcdd\" = [2]\n\"abcdee\" = [2]\n\"ababab\" = [3]\n\n3.\n3 triples and 4 doubles\n4. 3 * 4 = 12\n\nResult:\n12\n      `,\n      dataPath: \"./data/data02.txt\",\n      code: part01,\n      codeText: `\nconst part01 = input1 => {\n  const countCharacters = value => {\n    const object = {};\n    for (let index = 0; index < value.length; index++) {\n      const character = value[index];\n      if (object[character] === undefined) {\n        object[character] = 1;\n      } else {\n        object[character] += 1;\n      }\n    }\n    return [...new Set(Object.values(object))];\n  };\n\n  const multiply = (prev, next) => prev * next;\n\n  const input = input1.split(\"\\\\n\");\n\n  const countedCharacters = input.map(countCharacters);\n  const test = {};\n  const sumOfCounters = (prev, next) => {\n    const tmp = prev;\n    next.forEach(element => {\n      const asdasdasd = 'test'+element;\n      if (tmp[asdasdasd] === undefined) {\n        tmp[asdasdasd] = 1;\n      } else {\n        tmp[asdasdasd] += 1;\n      }\n    });\n    return test;\n  };\n  const result = countedCharacters.reduce(sumOfCounters, test);\n\n  delete result.test1;\n\n  return Object.values(result).reduce(multiply, 1);\n};\n`\n    },\n    {\n      name: \"02\",\n      description: `Find two sets of words that differ only in one letter`,\n      dataPath: \"./data/data02.txt\",\n      code: part02,\n      codeText: `\nconst part02 = input1 => {\n  const countDiff = (element1, element2) => {\n    const e1 = element1.split(\"\");\n    const e2 = element2.split(\"\");\n    let count = 0;\n    for (let index = 0; index < e1.length; index++) {\n      if (e1[index] !== e2[index]) {\n        count += 1;\n        if (count > 2) {\n          return { count: 2 };\n        }\n      }\n    }\n    return { count, e1, e2 };\n  };\n\n  const removeDiff = (e1, e2) => {\n    const result = [];\n    for (let index = 0; index < e1.length; index++) {\n      if (e1[index] === e2[index]) {\n        result.push(e1[index]);\n      }\n    }\n    return result;\n  };\n\n  const input = input1.split(\"\\\\n\");\n\n  const inputLength = input.length;\n  for (let index1 = 0; index1 < inputLength - 1; index1++) {\n    const element1 = input[index1];\n    for (let index2 = index1 + 1; index2 < inputLength; index2++) {\n      const element2 = input[index2];\n      const { count, e1, e2 } = countDiff(element1, element2);\n      if (count < 2) {\n        return removeDiff(e1, e2).join(\"\");\n      }\n    }\n  }\n  return null;\n};\n`\n    }\n  ]\n};\n\nconst Day02 = () => <Day {...props} />;\n\nexport default Day02;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Link, Route } from \"react-router-dom\";\nimport Day01 from \"./Day01\";\nimport Day02 from \"./Day02\";\n\nconst Home = () => <div>Select day and check/run my solutions</div>;\n\nconst MainMenu = () => {\n  return (\n    <ul>\n      <li>\n        <Link to=\"/\">\n          <button>Home</button>\n        </Link>\n      </li>\n      <li>\n        <Link to=\"/01\">\n          <button>Day 01</button>\n        </Link>\n      </li>\n      <li>\n        <Link to=\"/02\">\n          <button>Day 02</button>\n        </Link>\n      </li>\n    </ul>\n  );\n};\n\nclass App extends Component {\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div>\n          <header>\n            <h1>Welcome to Advent of code 2018</h1>\n            <h2>\n              solutions by:{\" \"}\n              <a href=\"https://github.com/pawelrutkowski/adventofcode-2018\">\n                pawelrutkowski\n              </a>\n            </h2>\n            <MainMenu />\n          </header>\n          <div>\n            <Route exact path={\"/\"} component={Home} />\n            <Route exact path={\"/01\"} component={Day01} />\n            <Route exact path={\"/02\"} component={Day02} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === \"[::1]\" ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n            \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}